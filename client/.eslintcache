[{"C:\\Users\\Maxim\\Desktop\\MERN\\client\\src\\index.tsx":"1","C:\\Users\\Maxim\\Desktop\\MERN\\client\\src\\App.tsx":"2","C:\\Users\\Maxim\\Desktop\\MERN\\client\\src\\routes\\routes.tsx":"3","C:\\Users\\Maxim\\Desktop\\MERN\\client\\src\\hooks\\http.hook.ts":"4","C:\\Users\\Maxim\\Desktop\\MERN\\client\\src\\hooks\\auth.hook.ts":"5","C:\\Users\\Maxim\\Desktop\\MERN\\client\\src\\context\\auth.context.ts":"6","C:\\Users\\Maxim\\Desktop\\MERN\\client\\src\\components\\ModalConfirm.tsx":"7","C:\\Users\\Maxim\\Desktop\\MERN\\client\\src\\components\\ModalAddTask\\ModalAddTask.tsx":"8","C:\\Users\\Maxim\\Desktop\\MERN\\client\\src\\components\\ModalAddTask\\DateAndTimePickers.tsx":"9","C:\\Users\\Maxim\\Desktop\\MERN\\client\\src\\components\\ModalAddTask\\useStyles.ts":"10","C:\\Users\\Maxim\\Desktop\\MERN\\client\\src\\utils\\utils.ts":"11","C:\\Users\\Maxim\\Desktop\\MERN\\client\\src\\context\\home.context.ts":"12","C:\\Users\\Maxim\\Desktop\\MERN\\client\\src\\pages\\Home\\HomePage.tsx":"13","C:\\Users\\Maxim\\Desktop\\MERN\\client\\src\\pages\\Home\\reducer.home.ts":"14","C:\\Users\\Maxim\\Desktop\\MERN\\client\\src\\pages\\Home\\actions.home.ts":"15","C:\\Users\\Maxim\\Desktop\\MERN\\client\\src\\pages\\Home\\constants.ts":"16","C:\\Users\\Maxim\\Desktop\\MERN\\client\\src\\roles.ts":"17","C:\\Users\\Maxim\\Desktop\\MERN\\client\\src\\components\\CheckEmployee.tsx":"18","C:\\Users\\Maxim\\Desktop\\MERN\\client\\src\\components\\Profile.tsx":"19","C:\\Users\\Maxim\\Desktop\\MERN\\client\\src\\pages\\Auth\\Auth.page.tsx":"20","C:\\Users\\Maxim\\Desktop\\MERN\\client\\src\\components\\Preloader.tsx":"21","C:\\Users\\Maxim\\Desktop\\MERN\\client\\src\\hoc\\TurnIntoList.tsx":"22","C:\\Users\\Maxim\\Desktop\\MERN\\client\\src\\hoc\\TurnIntoDiv.tsx":"23","C:\\Users\\Maxim\\Desktop\\MERN\\client\\src\\hoc\\toHTML.tsx":"24","C:\\Users\\Maxim\\Desktop\\MERN\\client\\src\\components\\Alert\\Alert.tsx":"25","C:\\Users\\Maxim\\Desktop\\MERN\\client\\src\\components\\PopupInfo.tsx":"26","C:\\Users\\Maxim\\Desktop\\taskManager\\client\\src\\index.tsx":"27","C:\\Users\\Maxim\\Desktop\\taskManager\\client\\src\\App.tsx":"28","C:\\Users\\Maxim\\Desktop\\taskManager\\client\\src\\hooks\\auth.hook.ts":"29","C:\\Users\\Maxim\\Desktop\\taskManager\\client\\src\\context\\auth.context.ts":"30","C:\\Users\\Maxim\\Desktop\\taskManager\\client\\src\\routes\\routes.tsx":"31","C:\\Users\\Maxim\\Desktop\\taskManager\\client\\src\\pages\\Home\\HomePage.tsx":"32","C:\\Users\\Maxim\\Desktop\\taskManager\\client\\src\\pages\\Auth\\Auth.page.tsx":"33","C:\\Users\\Maxim\\Desktop\\taskManager\\client\\src\\hooks\\http.hook.ts":"34","C:\\Users\\Maxim\\Desktop\\taskManager\\client\\src\\context\\home.context.ts":"35","C:\\Users\\Maxim\\Desktop\\taskManager\\client\\src\\pages\\Home\\reducer.home.ts":"36","C:\\Users\\Maxim\\Desktop\\taskManager\\client\\src\\pages\\Home\\actions.home.ts":"37","C:\\Users\\Maxim\\Desktop\\taskManager\\client\\src\\pages\\Home\\constants.ts":"38","C:\\Users\\Maxim\\Desktop\\taskManager\\client\\src\\context\\tasks.context.ts":"39","C:\\Users\\Maxim\\Desktop\\taskManager\\client\\src\\components\\TaskBlock\\reducer.tasks.ts":"40","C:\\Users\\Maxim\\Desktop\\taskManager\\client\\src\\components\\Preloader.tsx":"41","C:\\Users\\Maxim\\Desktop\\taskManager\\client\\src\\components\\TaskBlock\\TaskBlock.tsx":"42","C:\\Users\\Maxim\\Desktop\\taskManager\\client\\src\\components\\ModalAddTask\\ModalAddTask.tsx":"43","C:\\Users\\Maxim\\Desktop\\taskManager\\client\\src\\components\\Alert\\Alert.tsx":"44","C:\\Users\\Maxim\\Desktop\\taskManager\\client\\src\\components\\Navigation\\Header.tsx":"45","C:\\Users\\Maxim\\Desktop\\taskManager\\client\\src\\components\\TaskBlock\\action.tasks.ts":"46","C:\\Users\\Maxim\\Desktop\\taskManager\\client\\src\\components\\ModalAddTask\\useStyles.ts":"47","C:\\Users\\Maxim\\Desktop\\taskManager\\client\\src\\components\\TaskBlock\\constants.tsx":"48","C:\\Users\\Maxim\\Desktop\\taskManager\\client\\src\\utils\\utils.ts":"49","C:\\Users\\Maxim\\Desktop\\taskManager\\client\\src\\components\\TaskBlock\\Task.tsx":"50","C:\\Users\\Maxim\\Desktop\\taskManager\\client\\src\\components\\TaskBlock\\TaskLoader.tsx":"51","C:\\Users\\Maxim\\Desktop\\taskManager\\client\\src\\components\\StickySearchBlock.tsx":"52","C:\\Users\\Maxim\\Desktop\\taskManager\\client\\src\\components\\ModalAddTask\\DateAndTimePickers.tsx":"53","C:\\Users\\Maxim\\Desktop\\taskManager\\client\\src\\components\\Navigation\\FilterBar.tsx":"54","C:\\Users\\Maxim\\Desktop\\taskManager\\client\\src\\components\\ModalConfirm.tsx":"55","C:\\Users\\Maxim\\Desktop\\taskManager\\client\\src\\components\\Navigation\\Scroll.tsx":"56","C:\\Users\\Maxim\\Desktop\\taskManager\\client\\src\\components\\Navigation\\Dashboard.tsx":"57","C:\\Users\\Maxim\\Desktop\\taskManager\\client\\src\\hoc\\toHTML.tsx":"58","C:\\Users\\Maxim\\Desktop\\taskManager\\client\\src\\components\\users.util.ts":"59","C:\\Users\\Maxim\\Desktop\\taskManager\\client\\src\\components\\TaskBlock\\util.colors.ts":"60","C:\\Users\\Maxim\\Desktop\\taskManager\\client\\src\\components\\TaskBlock\\useStyles.ts":"61","C:\\Users\\Maxim\\Desktop\\taskManager\\client\\src\\roles.ts":"62","C:\\Users\\Maxim\\Desktop\\taskManager\\client\\src\\components\\PopupInfo.tsx":"63","C:\\Users\\Maxim\\Desktop\\taskManager\\client\\src\\components\\Profile.tsx":"64","C:\\Users\\Maxim\\Desktop\\taskManager\\client\\src\\components\\CheckEmployee.tsx":"65"},{"size":176,"mtime":1612103376201,"results":"66","hashOfConfig":"67"},{"size":786,"mtime":1612210633051,"results":"68","hashOfConfig":"67"},{"size":689,"mtime":1612403362755,"results":"69","hashOfConfig":"67"},{"size":1172,"mtime":1612202081149,"results":"70","hashOfConfig":"67"},{"size":1373,"mtime":1612339927078,"results":"71","hashOfConfig":"67"},{"size":599,"mtime":1612213286190,"results":"72","hashOfConfig":"67"},{"size":1350,"mtime":1612490325599,"results":"73","hashOfConfig":"67"},{"size":11985,"mtime":1612575373292,"results":"74","hashOfConfig":"67"},{"size":1175,"mtime":1612552586329,"results":"75","hashOfConfig":"67"},{"size":1742,"mtime":1612569035057,"results":"76","hashOfConfig":"67"},{"size":2499,"mtime":1612543732821,"results":"77","hashOfConfig":"67"},{"size":328,"mtime":1612189240033,"results":"78","hashOfConfig":"67"},{"size":7308,"mtime":1612572373935,"results":"79","hashOfConfig":"67"},{"size":4608,"mtime":1612576145857,"results":"80","hashOfConfig":"67"},{"size":1391,"mtime":1612575412409,"results":"81","hashOfConfig":"67"},{"size":394,"mtime":1612575003186,"results":"82","hashOfConfig":"67"},{"size":99,"mtime":1612213419461,"results":"83","hashOfConfig":"67"},{"size":2528,"mtime":1612571351520,"results":"84","hashOfConfig":"67"},{"size":1843,"mtime":1612215347050,"results":"85","hashOfConfig":"67"},{"size":3871,"mtime":1612269866347,"results":"86","hashOfConfig":"67"},{"size":527,"mtime":1612305060562,"results":"87","hashOfConfig":"67"},{"size":573,"mtime":1612478303444,"results":"88","hashOfConfig":"67"},{"size":458,"mtime":1612478309499,"results":"89","hashOfConfig":"67"},{"size":1447,"mtime":1612565715450,"results":"90","hashOfConfig":"67"},{"size":1256,"mtime":1612523051209,"results":"91","hashOfConfig":"67"},{"size":1327,"mtime":1612532174190,"results":"92","hashOfConfig":"67"},{"size":176,"mtime":1612103376201,"results":"93","hashOfConfig":"94"},{"size":786,"mtime":1612210633051,"results":"95","hashOfConfig":"94"},{"size":1490,"mtime":1612644598209,"results":"96","hashOfConfig":"94"},{"size":605,"mtime":1612647180333,"results":"97","hashOfConfig":"94"},{"size":689,"mtime":1612403362755,"results":"98","hashOfConfig":"94"},{"size":5671,"mtime":1612741269000,"results":"99","hashOfConfig":"94"},{"size":3854,"mtime":1612700590147,"results":"100","hashOfConfig":"94"},{"size":1308,"mtime":1612743333786,"results":"101","hashOfConfig":"94"},{"size":331,"mtime":1612631370477,"results":"102","hashOfConfig":"94"},{"size":1407,"mtime":1612735516128,"results":"103","hashOfConfig":"94"},{"size":450,"mtime":1612735622444,"results":"104","hashOfConfig":"94"},{"size":174,"mtime":1612735369542,"results":"105","hashOfConfig":"94"},{"size":342,"mtime":1612630498540,"results":"106","hashOfConfig":"94"},{"size":5371,"mtime":1612733574878,"results":"107","hashOfConfig":"94"},{"size":527,"mtime":1612305060562,"results":"108","hashOfConfig":"94"},{"size":3252,"mtime":1612727606489,"results":"109","hashOfConfig":"94"},{"size":14523,"mtime":1612724670114,"results":"110","hashOfConfig":"94"},{"size":1256,"mtime":1612616202714,"results":"111","hashOfConfig":"94"},{"size":953,"mtime":1612741426427,"results":"112","hashOfConfig":"94"},{"size":1481,"mtime":1612729891189,"results":"113","hashOfConfig":"94"},{"size":1742,"mtime":1612569035057,"results":"114","hashOfConfig":"94"},{"size":400,"mtime":1612729762236,"results":"115","hashOfConfig":"94"},{"size":2767,"mtime":1612725416058,"results":"116","hashOfConfig":"94"},{"size":9246,"mtime":1612735282381,"results":"117","hashOfConfig":"94"},{"size":941,"mtime":1612716972347,"results":"118","hashOfConfig":"94"},{"size":6997,"mtime":1612713158204,"results":"119","hashOfConfig":"94"},{"size":1175,"mtime":1612552586329,"results":"120","hashOfConfig":"94"},{"size":7157,"mtime":1612739991778,"results":"121","hashOfConfig":"94"},{"size":1280,"mtime":1612625853178,"results":"122","hashOfConfig":"94"},{"size":627,"mtime":1612621523814,"results":"123","hashOfConfig":"94"},{"size":4083,"mtime":1612741451012,"results":"124","hashOfConfig":"94"},{"size":1447,"mtime":1612565715450,"results":"125","hashOfConfig":"94"},{"size":378,"mtime":1612620501572,"results":"126","hashOfConfig":"94"},{"size":973,"mtime":1612482274354,"results":"127","hashOfConfig":"94"},{"size":2791,"mtime":1612740278057,"results":"128","hashOfConfig":"94"},{"size":99,"mtime":1612213419461,"results":"129","hashOfConfig":"94"},{"size":643,"mtime":1612625891181,"results":"130","hashOfConfig":"94"},{"size":1843,"mtime":1612215347050,"results":"131","hashOfConfig":"94"},{"size":8295,"mtime":1612742080633,"results":"132","hashOfConfig":"94"},{"filePath":"133","messages":"134","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"135"},"uhs19e",{"filePath":"136","messages":"137","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"138","usedDeprecatedRules":"135"},{"filePath":"139","messages":"140","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"135"},{"filePath":"141","messages":"142","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"143","usedDeprecatedRules":"135"},{"filePath":"144","messages":"145","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"135"},{"filePath":"146","messages":"147","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"148","usedDeprecatedRules":"135"},{"filePath":"149","messages":"150","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"151","usedDeprecatedRules":"135"},{"filePath":"152","messages":"153","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"154","messages":"155","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"135"},{"filePath":"156","messages":"157","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"135"},{"filePath":"158","messages":"159","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"160","usedDeprecatedRules":"135"},{"filePath":"161","messages":"162","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"163","usedDeprecatedRules":"135"},{"filePath":"164","messages":"165","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"166","messages":"167","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"168","messages":"169","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"170","messages":"171","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"172","messages":"173","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"135"},{"filePath":"174","messages":"175","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"176","usedDeprecatedRules":"135"},{"filePath":"177","messages":"178","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"135"},{"filePath":"179","messages":"180","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"181","usedDeprecatedRules":"135"},{"filePath":"182","messages":"183","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"135"},{"filePath":"184","messages":"185","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"186","messages":"187","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"188","messages":"189","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"190","usedDeprecatedRules":"135"},{"filePath":"191","messages":"192","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"193","usedDeprecatedRules":"135"},{"filePath":"194","messages":"195","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"196","usedDeprecatedRules":"135"},{"filePath":"197","messages":"198","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"199"},"1ia4xm",{"filePath":"200","messages":"201","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"138","usedDeprecatedRules":"199"},{"filePath":"202","messages":"203","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"199"},{"filePath":"204","messages":"205","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"199"},{"filePath":"206","messages":"207","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"199"},{"filePath":"208","messages":"209","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"210","messages":"211","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"212","usedDeprecatedRules":"199"},{"filePath":"213","messages":"214","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"215","messages":"216","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"217","usedDeprecatedRules":"199"},{"filePath":"218","messages":"219","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"220","messages":"221","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"222","messages":"223","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"224","messages":"225","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"226","usedDeprecatedRules":"199"},{"filePath":"227","messages":"228","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"199"},{"filePath":"229","messages":"230","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"199"},{"filePath":"231","messages":"232","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"233","messages":"234","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"235","usedDeprecatedRules":"199"},{"filePath":"236","messages":"237","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"193","usedDeprecatedRules":"199"},{"filePath":"238","messages":"239","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"240","messages":"241","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"242","messages":"243","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"199"},{"filePath":"244","messages":"245","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"246","messages":"247","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"248","usedDeprecatedRules":"199"},{"filePath":"249","messages":"250","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"251","messages":"252","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"199"},{"filePath":"253","messages":"254","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"255","usedDeprecatedRules":"199"},{"filePath":"256","messages":"257","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"199"},{"filePath":"258","messages":"259","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"260","messages":"261","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"262","usedDeprecatedRules":"199"},{"filePath":"263","messages":"264","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"199"},{"filePath":"265","messages":"266","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"267","messages":"268","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"190","usedDeprecatedRules":"199"},{"filePath":"269","messages":"270","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"199"},{"filePath":"271","messages":"272","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"199"},{"filePath":"273","messages":"274","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"275","messages":"276","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"199"},{"filePath":"277","messages":"278","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"199"},{"filePath":"279","messages":"280","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"199"},{"filePath":"281","messages":"282","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"199"},"C:\\Users\\Maxim\\Desktop\\MERN\\client\\src\\index.tsx",[],["283","284"],"C:\\Users\\Maxim\\Desktop\\MERN\\client\\src\\App.tsx",["285"],"import Container from '@material-ui/core/Container';\nimport React from 'react';\nimport {useRoutes} from \"./routes/routes\";\nimport {BrowserRouter as Router} from \"react-router-dom\";\nimport {useAuth} from \"./hooks/auth.hook\";\nimport { AuthContext } from './context/auth.context';\n\nfunction App() {\n    const {login, logout, token, person, setPerson} = useAuth()\n    const isAuthenticated = !!token\n    const routes = useRoutes(isAuthenticated)\n  return (\n          <AuthContext.Provider value={{\n              token,\n              login,\n              logout,\n              isAuthenticated,\n              person, \n              setPerson\n          }}>\n              <Router>\n                  {routes}\n              </Router>\n          </AuthContext.Provider>\n  );\n}\n\nexport default App;\n","C:\\Users\\Maxim\\Desktop\\MERN\\client\\src\\routes\\routes.tsx",[],"C:\\Users\\Maxim\\Desktop\\MERN\\client\\src\\hooks\\http.hook.ts",["286","287"],"import React from 'react'\r\nimport { AuthContext } from '../context/auth.context'\r\nconst storageName: string = 'userData'\r\nexport const useHttp = () => {\r\n    const [loading, setLoading] = React.useState<boolean>(false)\r\n    const [error, setError] = React.useState<string | null>(null)\r\n    const {token} = React.useContext(AuthContext)\r\n    const request = React.useCallback(async (url, method='GET', body=null, headers = {}) => {\r\n        setLoading(true)\r\n        headers['Authorization'] = `Bearer ${token}`\r\n        if(body){\r\n            body = JSON.stringify(body)\r\n            headers['Content-type'] = 'application/json'\r\n        } \r\n        try{\r\n            const res = await fetch(url, {method, headers, body})\r\n            const data = await res.json()\r\n\r\n            if(!res.ok){\r\n                throw new Error(data.message || 'Что-то пошло не так')\r\n            }\r\n\r\n            return data\r\n        } catch(e) {\r\n            setError(e.message)\r\n        } finally {\r\n            setLoading(false)\r\n        }\r\n    }, [])\r\n\r\n    const clearError = () => {\r\n        setError(null)\r\n    }\r\n\r\n    return {loading, request, error, clearError}\r\n}","C:\\Users\\Maxim\\Desktop\\MERN\\client\\src\\hooks\\auth.hook.ts",[],"C:\\Users\\Maxim\\Desktop\\MERN\\client\\src\\context\\auth.context.ts",["288"],"import {createContext} from \"react\";\r\nexport interface Person {\r\n    id: number,\r\n    role: string,\r\n    login: string\r\n}\r\ninterface AuthContext {\r\n    token: string | null,\r\n    login: (jwt: string) => void,\r\n    logout: () => void,\r\n    isAuthenticated: boolean,\r\n    person: Person,\r\n    setPerson: (person: Person) => void\r\n}\r\nconst noop = () => {}\r\n\r\nexport const AuthContext = createContext<AuthContext>({\r\n    token: null,\r\n    login: noop,\r\n    logout: noop,\r\n    isAuthenticated: false,\r\n    person: {\r\n        id: NaN,\r\n        role: '',\r\n        login: ''\r\n    },\r\n    setPerson: noop\r\n})","C:\\Users\\Maxim\\Desktop\\MERN\\client\\src\\components\\ModalConfirm.tsx",["289","290"],"import Button from \"@material-ui/core/Button\";\r\nimport Dialog from \"@material-ui/core/Dialog/Dialog\";\r\nimport DialogActions from \"@material-ui/core/DialogActions\";\r\nimport DialogContentText from \"@material-ui/core/DialogContentText\";\r\nimport DialogTitle from \"@material-ui/core/DialogTitle\";\r\nimport React from \"react\";\r\n\r\ninterface ModalConfirm {\r\n    isOpen: boolean,\r\n    callback: () => void | Promise<any>,\r\n    setConfirmOpen: (confirmOpen: boolean) => void,\r\n    title: string\r\n}\r\nconst ModalConfirm: React.FC<ModalConfirm> = ({isOpen, callback, setConfirmOpen, title}): React.ReactElement => {\r\n    return (\r\n        <Dialog\r\n            open={isOpen}\r\n            aria-labelledby=\"alert-dialog-title\"\r\n            aria-describedby=\"alert-dialog-description\"\r\n        >\r\n            <DialogTitle id=\"alert-dialog-title\">{title}</DialogTitle>\r\n            <DialogActions>\r\n                <Button onClick={() => {\r\n                    setConfirmOpen(false)\r\n                    callback()\r\n                }} color=\"primary\">\r\n                    Да\r\n                </Button>\r\n                <Button onClick={() => {\r\n                    setConfirmOpen(false)\r\n                }} color=\"primary\">\r\n                    Нет\r\n                </Button>\r\n            </DialogActions>\r\n        </Dialog>\r\n    )\r\n}\r\nexport default ModalConfirm","C:\\Users\\Maxim\\Desktop\\MERN\\client\\src\\components\\ModalAddTask\\ModalAddTask.tsx",["291","292","293"],"C:\\Users\\Maxim\\Desktop\\MERN\\client\\src\\components\\ModalAddTask\\DateAndTimePickers.tsx",[],"C:\\Users\\Maxim\\Desktop\\MERN\\client\\src\\components\\ModalAddTask\\useStyles.ts",[],"C:\\Users\\Maxim\\Desktop\\MERN\\client\\src\\utils\\utils.ts",["294"],"interface ListItem {\r\n    id: number\r\n}\r\n\r\nexport const scrollProgress = (callback: (progress: number) => void):void => {\r\n    const scrollHeight = document.body.clientHeight\r\n    const progressScroll = window.pageYOffset\r\n    const viewPart = window.innerHeight\r\n    \r\n    callback(Math.round((progressScroll + viewPart) / scrollHeight * 100))\r\n    if(progressScroll === 0){\r\n        callback(0)\r\n    }\r\n}\r\n\r\n// yyyy/mm/dd msk time zone\r\nconst msk = '3'\r\nexport const today = (format: string = msk): string | Date => {\r\n    //console.log(addToDate(new Date('2021-02-03 21:45:19')), 'MYYY');\r\n    \r\n    return addToDate(new Date().toJSON()).slice(0,10).replace(/-/g,'/')\r\n}\r\n\r\nexport const normalizeServerDate = (\r\n        date: Date | string | number\r\n    ): string => {\r\n    return reverseString(new Date(date)\r\n        .toLocaleDateString('ru-RU'), '.', '-')\r\n}\r\n\r\n// check defrence with date and return if now less deadline\r\nexport const isDeadlinePositive = (deadline: Date | string ): boolean => {\r\n    const dead = Date.parse(JSON.stringify(deadline))\r\n    let now: any = normalizeServerDate(new Date(today()))\r\n    now = Date.parse(JSON.stringify(now))\r\n    if(dead - now >= 0){\r\n        return true\r\n    } else return false\r\n}\r\nexport const addToDate = (\r\n    date: string | Date, hours = msk, day = '0', month= '0', year = '0'\r\n): string => {\r\n    const intF1 = (e: Date): string  => {\r\n        return e.getFullYear() \r\n        + \"-\" + ('0' + (e.getMonth() + 1)).slice(-2) \r\n        + \"-\" + ('0' + e.getDate()).slice(-2)\r\n        + \"-\" + ('0' + e.getHours()).slice(-2)\r\n    }\r\n    const D = new Date(date)\r\n    D.setFullYear(D.getFullYear() + parseFloat(year), D.getMonth() + parseFloat(month), D.getDate() + parseFloat(day));\r\n\r\n    return intF1(D)\r\n}\r\n\r\nexport function reverseString(\r\n        str: string, \r\n        splitBy?: string,\r\n        joinBy?: string\r\n    ): string {\r\n    return str.split(`${splitBy}`).reverse().join(`${joinBy}`);\r\n}\r\nexport const maxSimbols = (str: string, max: number): string => {\r\n    if(str.length < 15) return str\r\n    return str.slice(0, max) + '...'\r\n}\r\nexport const decorateDate = (date: string | Date) => {\r\n    let t = new Date(date)\r\n    \r\n    const Year = t.getFullYear();\r\n    const Month = t.getMonth();\r\n    const Day = t.getDate();\r\n    const fMonth = \r\n    ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'];\r\n    \r\n    return `${Day} ${fMonth[Month - 1]} ${Year}`\r\n}\r\n","C:\\Users\\Maxim\\Desktop\\MERN\\client\\src\\context\\home.context.ts",["295","296","297"],"import {createContext} from \"react\";\r\nimport { SystemAction } from \"../pages/Home/reducer.home\";\r\n\r\ninterface HomeContext {\r\n    state: object,\r\n    dispatch: (newObject: SystemAction) => object\r\n}\r\nconst noop = () => {}\r\n\r\nexport const HomeContext = createContext<any>({\r\n    state: {},\r\n    dispatch: () => ({type: ''}),\r\n})\r\n","C:\\Users\\Maxim\\Desktop\\MERN\\client\\src\\pages\\Home\\HomePage.tsx",["298","299","300"],"C:\\Users\\Maxim\\Desktop\\MERN\\client\\src\\pages\\Home\\reducer.home.ts",[],"C:\\Users\\Maxim\\Desktop\\MERN\\client\\src\\pages\\Home\\actions.home.ts",[],"C:\\Users\\Maxim\\Desktop\\MERN\\client\\src\\pages\\Home\\constants.ts",[],"C:\\Users\\Maxim\\Desktop\\MERN\\client\\src\\roles.ts",[],"C:\\Users\\Maxim\\Desktop\\MERN\\client\\src\\components\\CheckEmployee.tsx",["301"],"import React from 'react';\r\nimport { createStyles, makeStyles, Theme } from '@material-ui/core/styles';\r\nimport Button from '@material-ui/core/Button';\r\nimport Dialog from '@material-ui/core/Dialog';\r\nimport ListItemText from '@material-ui/core/ListItemText';\r\nimport ListItem from '@material-ui/core/ListItem';\r\nimport List from '@material-ui/core/List';\r\nimport Divider from '@material-ui/core/Divider';\r\nimport AppBar from '@material-ui/core/AppBar';\r\nimport Toolbar from '@material-ui/core/Toolbar';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport CloseIcon from '@material-ui/icons/Close';\r\nimport Slide from '@material-ui/core/Slide';\r\nimport { TransitionProps } from '@material-ui/core/transitions';\r\n\r\nconst useStyles = makeStyles((theme: Theme) =>\r\n  createStyles({\r\n    appBar: {\r\n      position: 'relative',\r\n    },\r\n    title: {\r\n      marginLeft: theme.spacing(2),\r\n      flex: 1,\r\n    },\r\n  }),\r\n);\r\n\r\nconst Transition = React.forwardRef(function Transition(\r\n  props: TransitionProps & { children?: React.ReactElement },\r\n  ref: React.Ref<unknown>,\r\n) {\r\n  return <Slide direction=\"up\" ref={ref} {...props} />;\r\n});\r\n\r\ninterface PropsCheckEmployee {\r\n    open: boolean,\r\n    setOpen: (open: boolean) => void,\r\n    employees: any\r\n}   \r\n\r\nconst CheckEmployee: React.FC<PropsCheckEmployee> = ({setOpen, open, employees}) => {\r\n  const classes = useStyles();\r\n\r\n  const handleClose = () => {\r\n    setOpen(false);\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <Dialog fullScreen open={open} onClose={handleClose} TransitionComponent={Transition}>\r\n        <AppBar className={classes.appBar}>\r\n          <Toolbar>\r\n            <IconButton edge=\"start\" color=\"inherit\" aria-label=\"close\">\r\n              +\r\n            </IconButton>\r\n            <Typography variant=\"h6\" className={classes.title}>\r\n              Employees\r\n            </Typography>\r\n            <Button autoFocus color=\"inherit\" onClick={handleClose}>\r\n              save\r\n            </Button>\r\n          </Toolbar>\r\n        </AppBar>\r\n        <List>\r\n          {employees.map((employee: any) => {\r\n            return (\r\n              <>\r\n                <ListItem button>\r\n                  <ListItemText primary={employee.title} secondary=\"И можно будет управлять им\" />\r\n                </ListItem>\r\n                <Divider />\r\n              </>\r\n            )\r\n          })}\r\n        </List>\r\n      </Dialog>\r\n    </div>\r\n  );\r\n}\r\nexport default CheckEmployee","C:\\Users\\Maxim\\Desktop\\MERN\\client\\src\\components\\Profile.tsx",[],"C:\\Users\\Maxim\\Desktop\\MERN\\client\\src\\pages\\Auth\\Auth.page.tsx",["302","303"],"import React from 'react'\r\nimport {Button, TextField, Typography} from \"@material-ui/core\";\r\nimport {useHttp} from \"../../hooks/http.hook\";\r\nimport { AuthContext } from '../../context/auth.context';\r\nimport {makeStyles} from \"@material-ui/core/styles\";\r\n\r\n// interface\r\ninterface Form {\r\n    login: string,\r\n    password: string\r\n}\r\n\r\n// styles\r\nconst useStyles = makeStyles(() => ({\r\n    auth__wrapper: {\r\n        height: '100vh',\r\n        width: '100%',\r\n        backgroundColor: '#3F51B5',\r\n        display: 'flex',\r\n        alignItems: 'center',\r\n        justifyContent: 'center'\r\n    },\r\n    auth__form: {\r\n        backgroundColor: '#fff',\r\n        padding: '15px',\r\n        minHeight: '300px',\r\n        maxWidth: '400px',\r\n        width: '100%',\r\n        borderRadius: '5px'\r\n    },\r\n    authInputs: {\r\n        marginBottom: '30px',\r\n        '& input' : {},\r\n        '& span': {\r\n            color: 'red'\r\n        }\r\n    },\r\n    auth__btn: {\r\n\r\n    }\r\n}))\r\n\r\nconst AuthPage:React.FC = ():React.ReactElement => {\r\n    const classes = useStyles()\r\n    const {login, setPerson} = React.useContext(AuthContext)\r\n    const {loading, request, error} = useHttp()\r\n    const [form, setForm] = React.useState<Form>({\r\n        login: '', password: ''\r\n    })\r\n    \r\n\r\n    const [emptyError, setEmptyError] = React.useState<string>('')\r\n\r\n    const changeHandler = (e: React.ChangeEvent<HTMLInputElement>) => {\r\n        setForm({...form, [e.target.name]: e.target.value})\r\n    }\r\n    const registerHandler = async () => {\r\n        try {\r\n            const data = await request('http://localhost:4000/api/registration', 'POST', {...form})\r\n        } catch(e) {\r\n\r\n        }\r\n    }\r\n    const loginHandler = async (e: React.MouseEvent<HTMLButtonElement> | React.FormEvent) => {\r\n        e.preventDefault()\r\n        try {\r\n            if(form.login.trim() === '') return setEmptyError('Введите логин')\r\n            if(form.password.trim() === '') return setEmptyError('Введите пароль')\r\n\r\n            const data = await request('http://localhost:4000/api/login', 'POST', {...form})\r\n            login(data.token)\r\n            setPerson(data.person)\r\n        } catch(e) {\r\n\r\n        }\r\n    }\r\n\r\n    return(\r\n        <div className={classes.auth__wrapper}>\r\n            <form \r\n                className={classes.auth__form}\r\n                onSubmit={loginHandler}\r\n            >\r\n                <Typography variant='h3'>Войти</Typography>\r\n                <div>\r\n                    <div className={classes.authInputs}>\r\n                        <TextField\r\n                            fullWidth\r\n                            id=\"standard-password-input\"\r\n                            label=\"Логин\"\r\n                            type=\"text\"\r\n                            name=\"login\"\r\n                            onChange={changeHandler}\r\n                        />\r\n                        <TextField\r\n                            fullWidth\r\n                            id=\"standard-password-input\"\r\n                            label=\"Пароль\"\r\n                            type=\"password\"\r\n                            autoComplete=\"current-password\"\r\n                            name=\"password\"\r\n                            onChange={changeHandler}\r\n                        />\r\n                        {loading ? <div>загрузка...</div> : <span>{error || emptyError}</span>}\r\n                    </div>\r\n                    <Button\r\n                        type='submit'\r\n                        className={classes.auth__btn}\r\n                        fullWidth\r\n                        variant=\"outlined\"\r\n                        onClick={loginHandler}\r\n                        disabled={!!loading}\r\n                    >Войти</Button>\r\n                </div>\r\n            </form>\r\n        </div>\r\n    )\r\n}\r\nexport default AuthPage","C:\\Users\\Maxim\\Desktop\\MERN\\client\\src\\components\\Preloader.tsx",[],"C:\\Users\\Maxim\\Desktop\\MERN\\client\\src\\hoc\\TurnIntoList.tsx",[],"C:\\Users\\Maxim\\Desktop\\MERN\\client\\src\\hoc\\TurnIntoDiv.tsx",[],"C:\\Users\\Maxim\\Desktop\\MERN\\client\\src\\hoc\\toHTML.tsx",["304","305"],"import React from 'react'\r\n\r\nconst toHTML = (component: string): any => {\r\n    // if(component.match(/<div><br><\\/div>/g)){\r\n    //     console.log('НУ попали');\r\n    //     component = component.replace(/<div><br><\\/div>/g, ' ')\r\n    // }\r\n    if(component.match(/&nbsp;/g)){\r\n        component = component.replace(/&nbsp;/g, ' ')\r\n    }\r\n    if(component.match(/<ul>/g)){\r\n        component = component.replace(/<ul>|<\\/ul>/g, '').trim()\r\n        component = component.replace(/<li>/g, '').trim()\r\n        component = component.replace(/<\\/li>/g, '<br>').trim()\r\n        let arrComp = component.split('<br>')\r\n        \r\n        return (\r\n            <div>\r\n                {arrComp.map((item, i) => {\r\n                    if(item.length){\r\n                        return <div key={item}>{item}</div>\r\n                    }\r\n                })}\r\n            </div>\r\n        )\r\n    }\r\n    if(component.match(/<div>/g)){\r\n        component = component.replace(/<div>/g, '<br>').trim()\r\n        component = component.replace(/<\\/div>/g, '').trim()\r\n        let arrComp = component.split('<br>')\r\n\r\n        return (\r\n            <>\r\n                {arrComp.map((item) => {\r\n                    if(item.length){\r\n                        return <div key={item}>{item}</div>\r\n                    }\r\n                })}\r\n            </>\r\n        )\r\n    }\r\n    return component.trim().replace(/<\\/?[^>]+(>|$)/g, \"\");\r\n}\r\n\r\nexport default toHTML\r\n","C:\\Users\\Maxim\\Desktop\\MERN\\client\\src\\components\\Alert\\Alert.tsx",["306"],"import React from 'react'\r\nimport { makeStyles, Theme, createStyles } from '@material-ui/core/styles';\r\nimport Alert from '@material-ui/lab/Alert';\r\nimport { Button, Collapse, IconButton } from '@material-ui/core';\r\nimport CloseIcon from '@material-ui/icons/Close';\r\n\r\ninterface AlertProps {\r\n    message: string,\r\n    styles?: any ,\r\n    open: boolean,\r\n    setOpen: (flag: boolean) => void\r\n}\r\n\r\nconst useStyles = makeStyles((theme: Theme) =>\r\n  createStyles({\r\n    root: {\r\n      width: '100%',\r\n      '& > * + *': {\r\n        marginTop: theme.spacing(2),\r\n      },\r\n    },\r\n  }),\r\n);\r\n\r\nexport default function AlertSuccess({message, styles={}, setOpen, open}: AlertProps): React.ReactElement {\r\n  const classes = useStyles();\r\n\r\n  return (\r\n    <div className={`${classes.root} ${styles}`}>\r\n      <Collapse in={open}>\r\n        <Alert\r\n          action={\r\n            <IconButton\r\n              aria-label=\"close\"\r\n              color=\"inherit\"\r\n              size=\"small\"\r\n              onClick={() => {\r\n                setOpen(false);\r\n              }}\r\n            >\r\n              <CloseIcon fontSize=\"inherit\" />\r\n            </IconButton>\r\n          }\r\n        >\r\n          {message}\r\n        </Alert>\r\n      </Collapse>\r\n    </div>\r\n  );\r\n}\r\n\r\n","C:\\Users\\Maxim\\Desktop\\MERN\\client\\src\\components\\PopupInfo.tsx",["307","308","309","310","311"],"import React from 'react';\r\nimport { makeStyles, createStyles, Theme } from '@material-ui/core/styles';\r\nimport Popover from '@material-ui/core/Popover';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Button from '@material-ui/core/Button';\r\nimport { Popper } from '@material-ui/core';\r\n\r\nconst useStyles = makeStyles((theme: Theme) =>\r\n  createStyles({\r\n    typography: {\r\n      padding: theme.spacing(2),\r\n    },\r\n  }),\r\n);\r\ninterface PopupInfoProps {\r\n    anchorEl: null | HTMLElement\r\n    setAnchorEl: (anchorEl:  null | HTMLElement) => void ,\r\n    children: any\r\n}\r\nexport default function PopupInfo({anchorEl, setAnchorEl, children}: PopupInfoProps) {\r\n  const classes = useStyles();\r\n\r\n\r\n  const handleClose = () => {\r\n    setAnchorEl(null);\r\n  };\r\n\r\n  const open = Boolean(anchorEl);\r\n  const id = open ? 'simple-popover' : undefined;\r\n\r\n  return (\r\n    <div>\r\n      <Popper \r\n        id={id}\r\n        open={open}\r\n        anchorEl={anchorEl}\r\n        //onClick={handleClose}\r\n        //onClose={handleClose}\r\n        // anchorOrigin={{\r\n        //   vertical: 'bottom',\r\n        //   horizontal: 'center',\r\n        // }}\r\n        // transformOrigin={{\r\n        //   vertical: 'top',\r\n        //   horizontal: 'center',\r\n        // }}\r\n      >\r\n        {children}\r\n      </Popper >\r\n    </div>\r\n  );\r\n}","C:\\Users\\Maxim\\Desktop\\taskManager\\client\\src\\index.tsx",[],["312","313"],"C:\\Users\\Maxim\\Desktop\\taskManager\\client\\src\\App.tsx",["314"],"C:\\Users\\Maxim\\Desktop\\taskManager\\client\\src\\hooks\\auth.hook.ts",[],"C:\\Users\\Maxim\\Desktop\\taskManager\\client\\src\\context\\auth.context.ts",[],"C:\\Users\\Maxim\\Desktop\\taskManager\\client\\src\\routes\\routes.tsx",[],"C:\\Users\\Maxim\\Desktop\\taskManager\\client\\src\\pages\\Home\\HomePage.tsx",["315","316","317","318","319"],"C:\\Users\\Maxim\\Desktop\\taskManager\\client\\src\\pages\\Auth\\Auth.page.tsx",["320","321"],"import React from 'react'\r\nimport {Button, CircularProgress, TextField, Typography} from \"@material-ui/core\";\r\nimport {useHttp} from \"../../hooks/http.hook\";\r\nimport { AuthContext } from '../../context/auth.context';\r\nimport {makeStyles} from \"@material-ui/core/styles\";\r\n\r\n// interface\r\ninterface Form {\r\n    login: string,\r\n    password: string\r\n}\r\n\r\n// styles\r\nconst useStyles = makeStyles(() => ({\r\n    auth__wrapper: {\r\n        height: '100vh',\r\n        width: '100%',\r\n        backgroundColor: '#3F51B5',\r\n        display: 'flex',\r\n        alignItems: 'center',\r\n        justifyContent: 'center'\r\n    },\r\n    auth__form: {\r\n        backgroundColor: '#fff',\r\n        padding: '15px',\r\n        minHeight: '300px',\r\n        maxWidth: '400px',\r\n        width: '100%',\r\n        borderRadius: '5px'\r\n    },\r\n    authInputs: {\r\n        marginBottom: '30px',\r\n        '& input' : {},\r\n        '& span': {\r\n            color: 'red'\r\n        }\r\n    },\r\n    auth__btn: {\r\n\r\n    }\r\n}))\r\n\r\nconst AuthPage:React.FC = ():React.ReactElement => {\r\n    const classes = useStyles()\r\n    const {login, setPerson} = React.useContext(AuthContext)\r\n    const {loading, request, error} = useHttp()\r\n    const [form, setForm] = React.useState<Form>({\r\n        login: '', password: ''\r\n    })\r\n    \r\n\r\n    const [emptyError, setEmptyError] = React.useState<string>('')\r\n\r\n    const changeHandler = (e: React.ChangeEvent<HTMLInputElement>) => {\r\n        setForm({...form, [e.target.name]: e.target.value})\r\n    }\r\n    const registerHandler = async () => {\r\n        try {\r\n            const data = await request('/registration', 'POST', {...form})\r\n        } catch(e) {\r\n\r\n        }\r\n    }\r\n    const loginHandler = async (e: React.MouseEvent<HTMLButtonElement> | React.FormEvent) => {\r\n        e.preventDefault()\r\n        try {\r\n            if(form.login.trim() === '') return setEmptyError('Введите логин')\r\n            if(form.password.trim() === '') return setEmptyError('Введите пароль')\r\n\r\n            const data = await request('/login', 'POST', {...form})\r\n            setPerson(data.person)\r\n            login(data.token)\r\n        } catch(e) {\r\n\r\n        }\r\n    }\r\n\r\n    return(\r\n        <div className={classes.auth__wrapper}>\r\n            <form \r\n                className={classes.auth__form}\r\n                onSubmit={loginHandler}\r\n            >\r\n                <Typography variant='h3'>Войти</Typography>\r\n                <div>\r\n                    <div className={classes.authInputs}>\r\n                        <TextField\r\n                            fullWidth\r\n                            id=\"standard-password-input\"\r\n                            label=\"Логин\"\r\n                            type=\"text\"\r\n                            name=\"login\"\r\n                            onChange={changeHandler}\r\n                        />\r\n                        <TextField\r\n                            fullWidth\r\n                            id=\"standard-password-input\"\r\n                            label=\"Пароль\"\r\n                            type=\"password\"\r\n                            autoComplete=\"current-password\"\r\n                            name=\"password\"\r\n                            onChange={changeHandler}\r\n                        />\r\n                        {loading ? <CircularProgress size={24} color=\"primary\"/> : <span>{error || emptyError}</span>}\r\n                    </div>\r\n                    <Button\r\n                        type='submit'\r\n                        className={classes.auth__btn}\r\n                        fullWidth\r\n                        variant=\"outlined\"\r\n                        onClick={loginHandler}\r\n                        disabled={!!loading}\r\n                    >Войти</Button>\r\n                </div>\r\n            </form>\r\n        </div>\r\n    )\r\n}\r\nexport default AuthPage","C:\\Users\\Maxim\\Desktop\\taskManager\\client\\src\\hooks\\http.hook.ts",["322","323"],"C:\\Users\\Maxim\\Desktop\\taskManager\\client\\src\\context\\home.context.ts",["324","325"],"import {createContext} from \"react\";\r\nimport { SystemAction } from \"../pages/Home/reducer.home\";\r\n\r\ninterface HomeContextInt {\r\n    state: object,\r\n    dispatch: (newObject: SystemAction) => object\r\n}\r\nconst noop = () => {}\r\n\r\nexport const HomeContext = createContext<any>({\r\n    state: {},\r\n    dispatch: () => ({type: ''}),\r\n})\r\n","C:\\Users\\Maxim\\Desktop\\taskManager\\client\\src\\pages\\Home\\reducer.home.ts",[],"C:\\Users\\Maxim\\Desktop\\taskManager\\client\\src\\pages\\Home\\actions.home.ts",[],"C:\\Users\\Maxim\\Desktop\\taskManager\\client\\src\\pages\\Home\\constants.ts",[],"C:\\Users\\Maxim\\Desktop\\taskManager\\client\\src\\context\\tasks.context.ts",["326","327"],"import {createContext} from \"react\";\r\nimport { SystemAction } from \"../components/TaskBlock/reducer.tasks\";\r\n\r\ninterface TasksContextInt {\r\n    state: object,\r\n    dispatch: (newObject: SystemAction) => object\r\n}\r\nconst noop = () => {}\r\n\r\nexport const TasksContext = createContext<any>({\r\n    state: {},\r\n    dispatch: () => ({type: ''}),\r\n})","C:\\Users\\Maxim\\Desktop\\taskManager\\client\\src\\components\\TaskBlock\\reducer.tasks.ts",[],"C:\\Users\\Maxim\\Desktop\\taskManager\\client\\src\\components\\Preloader.tsx",[],"C:\\Users\\Maxim\\Desktop\\taskManager\\client\\src\\components\\TaskBlock\\TaskBlock.tsx",["328"],"C:\\Users\\Maxim\\Desktop\\taskManager\\client\\src\\components\\ModalAddTask\\ModalAddTask.tsx",["329","330"],"import { Button, CircularProgress, Dialog, IconButton, TextareaAutosize } from '@material-ui/core'\r\nimport React from 'react'\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport StickySearchBlock from '../StickySearchBlock';\r\n\r\nimport CloseIcon from '@material-ui/icons/Close';\r\nimport DeleteIcon from '@material-ui/icons/Delete';\r\nimport DateAndTimePickers from './DateAndTimePickers';\r\nimport useStyles from './useStyles';\r\nimport { useHttp } from '../../hooks/http.hook';\r\nimport { TasksContext } from '../../context/tasks.context';\r\nimport { delete_task, task_loading, upadte_task_param, update_data } from '../../components/TaskBlock/action.tasks';\r\nimport { AuthContext } from '../../context/auth.context';\r\nimport { normalizeServerDate, today } from '../../utils/utils';\r\nimport toHTML from '../../hoc/toHTML'\r\nimport { Task } from '../../components/TaskBlock/reducer.tasks';\r\nimport ModalConfirm from '../ModalConfirm';\r\ninterface PropsModalAddTask {\r\n    open: boolean,\r\n    onClose: () => void,\r\n    responsibilityUsers: any,\r\n    priorityData: any,\r\n    setOpenAlertSuccess: (flag: boolean) => void,\r\n    setMessageAlert: (message: string) => void,\r\n    deadLine?: string \r\n    title?: string\r\n    description?: string\r\n    responsible?: any\r\n    priority?: any,\r\n    edit?: boolean,\r\n    taskId?:number,\r\n    isCreator?:boolean,\r\n    isMyEmployee?:boolean\r\n}\r\ninterface TaskErrors {\r\n    title: string,\r\n    description: string,\r\n    startLine?: string | Date,\r\n    deadLine: string | Date,\r\n    priority: string,\r\n    responsible: string,\r\n}\r\n\r\nconst TIME_CLOSE_ALERT = 1500 \r\n\r\nconst ModalAddTask:React.FC<PropsModalAddTask> = ({\r\n    edit = false,\r\n    open, onClose, \r\n    responsibilityUsers, priorityData, \r\n    setOpenAlertSuccess, setMessageAlert,\r\n    isCreator=false,\r\n    title='', description='', \r\n    deadLine='',\r\n    priority='', responsible='', taskId=1,\r\n    isMyEmployee=false\r\n}): React.ReactElement => {\r\n    const classes = useStyles()\r\n\r\n    const {loading, request, error} = useHttp()\r\n\r\n    const [errors, setErrors] = React.useState<TaskErrors>({\r\n        title,\r\n        description,\r\n        deadLine,\r\n        priority,\r\n        responsible\r\n    })\r\n    \r\n    const {person} = React.useContext(AuthContext)\r\n    \r\n    const [newStartLine, setStartLine] = React.useState<Date | string>(new Date(today()))\r\n    const [newDeadLine, setDeadLine] = React.useState<Date | string>(deadLine || new Date(today()))\r\n\r\n    const [newPriority, setPriority] = React.useState<any>(priority || priorityData[0])\r\n    const [newResponsible, setResponsible] = React.useState<any>(responsible || person)\r\n\r\n    const handlerChangeStartLine = (date: string): void => {   \r\n        setStartLine(date)\r\n        setErrors({...errors, startLine: ''})\r\n    }\r\n    const handlerChangeDeadLine = (date: string): void => {\r\n        setDeadLine(date)\r\n        setErrors({...errors, deadLine: ''})\r\n    }\r\n\r\n    const titleInput = React.createRef();\r\n\r\n    const descriptionInput = React.createRef();\r\n\r\n    const {dispatchTasks} = React.useContext(TasksContext)\r\n\r\n    // only for create task\r\n    const handlerCreateTask = async() => {\r\n        let flagErr = false\r\n        // @ts-ignore\r\n        if(titleInput.current.innerHTML  === ''){\r\n            flagErr = true\r\n            setErrors({\r\n                ...errors,\r\n                title: 'Specify the title'\r\n            })\r\n        } else {\r\n            setErrors({\r\n                ...errors,\r\n                title: ''\r\n            })\r\n        }\r\n        if(newDeadLine === ''){\r\n            flagErr = true\r\n            setErrors({\r\n                ...errors,\r\n                deadLine: 'Specify the date of deadline'\r\n            })\r\n        }\r\n        if(newStartLine  === ''){\r\n            flagErr = true\r\n            setErrors({\r\n                ...errors,\r\n                startLine: 'Specify the date of start'\r\n            })\r\n        }\r\n        if(!newResponsible){\r\n            flagErr = true\r\n            setErrors({\r\n                ...errors,\r\n                responsible: 'Specify the responsible of task'\r\n            })\r\n        }\r\n        if(!newPriority){\r\n            flagErr = true\r\n            setErrors({\r\n                ...errors,\r\n                priority: 'Specify the priority'\r\n            })\r\n        }\r\n        \r\n        if(flagErr) {\r\n            return\r\n        }\r\n\r\n        let task: Task = {\r\n            // @ts-ignore\r\n            title: toHTML(titleInput.current.innerHTML),\r\n\r\n            // Description is keeping on DB with HTML tags cause will be format for text\r\n            // @ts-ignore  \r\n            description: descriptionInput.current.innerHTML,\r\n            start_time: normalizeServerDate(newStartLine),\r\n            end_time: normalizeServerDate(newDeadLine),\r\n            priority_id: newPriority.id,\r\n            responsible_id: newResponsible ? newResponsible.id : person.id,\r\n        }\r\n    \r\n        \r\n        if(!edit){\r\n                const data = await request('/tasks/add', 'POST', task)\r\n                if(data.status === 1){\r\n                    setOpenAlertSuccess(true)\r\n                    setMessageAlert(data.message+' for '+newResponsible.title)\r\n                    setTimeout(() => {\r\n                        setOpenAlertSuccess(false)\r\n                    }, TIME_CLOSE_ALERT);\r\n                }\r\n                if((person.id === newResponsible.id)){\r\n                    dispatchTasks(update_data([data.data]))\r\n                }\r\n        } else {\r\n            const taskWithId = {...task, id: taskId}\r\n\r\n            const data = await request('/tasks/update', 'PUT', taskWithId)\r\n            if(data.status === 1){\r\n                setOpenAlertSuccess(true)\r\n                setMessageAlert(data.message)\r\n                setTimeout(() => {\r\n                    setOpenAlertSuccess(false)\r\n                }, TIME_CLOSE_ALERT);\r\n            }\r\n            \r\n            dispatchTasks(upadte_task_param([data.data]))\r\n        }\r\n        \r\n        onClose()\r\n    }\r\n\r\n    const [confirmCancelTask, setConfirmCancelTask] = React.useState<boolean>(false);\r\n    const [confirmDeleteTask, setConfirmDeleteTask] = React.useState<boolean>(false)\r\n\r\n    //Нужно вынести повторяется в таск\r\n    const requestDelTask = async () => {\r\n        const data = await request(`/tasks/del?id=${taskId}`, 'DELETE')\r\n        if(data.status === 1){\r\n            setOpenAlertSuccess(true)\r\n            setMessageAlert(data.message)\r\n            setTimeout(() => {\r\n                setOpenAlertSuccess(false)\r\n            }, TIME_CLOSE_ALERT);\r\n        }\r\n        dispatchTasks(delete_task(taskId))\r\n        onClose()\r\n    }\r\n\r\n    const handlerCancelTask = () => {\r\n        setConfirmCancelTask(true)\r\n    }\r\n\r\n    const handlerDelTask = () => {\r\n        setConfirmDeleteTask(true)\r\n    }\r\n\r\n    //Нужно вынести повторяется в таск\r\n    const requestChangeStatus = (status_id: number, status_title: string, resId: number, id: number): Function => {\r\n        return async (): Promise<any> => {\r\n            dispatchTasks(task_loading())\r\n            await request(`/tasks/status?resId=${resId}&id=${taskId}&status_id=${status_id}&status_title=${status_title}`)\r\n            dispatchTasks(task_loading())\r\n            dispatchTasks(upadte_task_param([{\r\n                status_id,\r\n                status_title,\r\n                id\r\n            }]))\r\n            onClose()\r\n        }\r\n    }\r\n\r\n    return (\r\n        <Dialog\r\n            onClose={onClose}\r\n            open={open}\r\n        >\r\n            {errors.priority.length > 0 ? 'Приори' : null}\r\n            {errors.responsible.length > 0 ? 'Респ' : null}\r\n            <div className={classes.wrapper}>\r\n                <Typography \r\n                    className={classes.modalTitle}\r\n                    variant='h4'\r\n                >{title ? 'Update task': 'New task'}\r\n                {edit && (isCreator || isMyEmployee) && (\r\n                    <IconButton \r\n                        color=\"secondary\" \r\n                        onClick={handlerDelTask}\r\n                    >\r\n                        <DeleteIcon color=\"secondary\" />\r\n                    </IconButton>\r\n                )}\r\n                </Typography>\r\n                <div className={classes.dateControl}>\r\n\r\n                    {!edit && (<div>\r\n                        <DateAndTimePickers\r\n                            label={'Date of start task'}\r\n                            setLine={handlerChangeStartLine}\r\n                        />\r\n                        {errors.startLine && (\r\n                            <span className={classes.error}>\r\n                                {errors.startLine}\r\n                            </span>\r\n                        )}\r\n                    </div>)}\r\n\r\n                    {(isCreator || isMyEmployee) && (<div>\r\n                        <DateAndTimePickers\r\n                            label='Date of end task'\r\n                            setLine={handlerChangeDeadLine}\r\n                            defaultValue={newDeadLine}\r\n                        />\r\n                        {!edit && errors.deadLine && (\r\n                            <span className={classes.error}>\r\n                                {errors.deadLine}\r\n                            </span>\r\n                        )}\r\n                    </div>)}\r\n\r\n                </div>\r\n                {(isCreator || isMyEmployee) && <div className={classes.taskTitle}>\r\n                        {edit && <div>Title</div>}\r\n                        <div \r\n                            className={`${classes.divTaskTextarea} ${classes.taskTextareaTitle}`}\r\n                            contentEditable\r\n                            placeholder=\"Write title...\" \r\n                            // @ts-ignore\r\n                            ref={titleInput}\r\n                            suppressContentEditableWarning={true}\r\n                        >\r\n                            {toHTML(title)}\r\n                        </div>\r\n                    {!edit && errors.title && (\r\n                        <span className={classes.error}>\r\n                            {errors.title}\r\n                        </span>\r\n                    )}\r\n                </div>}\r\n                {!isMyEmployee && !isCreator && edit &&(\r\n                    <div>\r\n                        <div>Title</div>\r\n                        {/* @ts-ignore */}\r\n                        <h3 ref={titleInput}>{toHTML(title)}</h3>\r\n                    </div>\r\n                )}\r\n                <div className={classes.taskDescription}>\r\n                    {edit && <div>Description</div>}\r\n                    <div \r\n                        className={`${classes.divTaskTextarea} \r\n                        ${classes.taskTextareaDescription}`}\r\n\r\n                        contentEditable\r\n                        placeholder=\"Write text of task...\" \r\n                        // @ts-ignore\r\n                        ref={descriptionInput}\r\n                        suppressContentEditableWarning={true}\r\n                    >\r\n                        {toHTML(description)}\r\n                    </div>\r\n                    \r\n                    {!edit && errors.description && (\r\n                        <span className={classes.error}>\r\n                            {errors.description}\r\n                        </span>\r\n                    )}\r\n                </div>\r\n                {(isCreator || isMyEmployee) && (\r\n                    <div className={classes.responsibleBlock}>\r\n                        {responsibilityUsers && \r\n                            <StickySearchBlock\r\n                                title=\"Responsible\"\r\n                                chooseName=\"choose people\"\r\n                                data={responsibilityUsers}\r\n                                value={newResponsible}\r\n                                setValue={setResponsible}\r\n                            />\r\n                        }\r\n                    </div>\r\n                )}\r\n                {(isMyEmployee || isCreator) && <div className={classes.responsibleBlock}>\r\n                    <StickySearchBlock\r\n                        title=\"Priority\"\r\n                        // !!!!!!!!!!!!!!!!!!!!!!!!!!!!!\r\n                        data={priorityData}\r\n                        // !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!! was [priority]\r\n                        value={newPriority}\r\n                        setValue={setPriority}\r\n                    />\r\n                </div>}\r\n                \r\n                <Button\r\n                    variant=\"contained\"\r\n                    disabled={loading}\r\n                    onClick={handlerCreateTask}\r\n                    className={classes.acceptBtn}\r\n                >\r\n                    {loading && <CircularProgress size={24} color=\"primary\"/>}\r\n                    {!loading && (\r\n                        !edit ? 'Create task' : 'Update task'\r\n                    )}\r\n                    \r\n                </Button>\r\n                {edit && (\r\n                    <Button\r\n                        variant=\"contained\"\r\n                        color=\"secondary\"\r\n                        disabled={loading}\r\n                        className={classes.acceptBtn}\r\n                        style={{marginLeft: 5}}\r\n                        onClick={handlerCancelTask}\r\n                    >\r\n                        Cancel task\r\n                    </Button>\r\n                )}\r\n            </div>\r\n            <IconButton \r\n                onClick={onClose}\r\n                className={classes.taskClose}\r\n                color=\"secondary\" \r\n                aria-label=\"close\"\r\n            >\r\n                <CloseIcon style={{ fontSize: 26 }} color=\"secondary\" />\r\n            </IconButton>\r\n            <ModalConfirm \r\n                isOpen={confirmCancelTask} \r\n                setConfirmOpen={setConfirmCancelTask} \r\n                // @ts-ignore\r\n                callback={requestChangeStatus(4, 'cancel', newResponsible.id, taskId)}\r\n                title={\"Are you sure to want to cancel the task?\"}\r\n            />\r\n            <ModalConfirm \r\n                isOpen={confirmDeleteTask} \r\n                setConfirmOpen={setConfirmDeleteTask} \r\n                // @ts-ignore\r\n                callback={() => {requestDelTask()}}\r\n                title={\"Are you sure to want to delete the task?\"}\r\n            />\r\n        </Dialog>\r\n    )\r\n}\r\n\r\nexport default ModalAddTask\r\n","C:\\Users\\Maxim\\Desktop\\taskManager\\client\\src\\components\\Alert\\Alert.tsx",["331"],"C:\\Users\\Maxim\\Desktop\\taskManager\\client\\src\\components\\Navigation\\Header.tsx",[],"C:\\Users\\Maxim\\Desktop\\taskManager\\client\\src\\components\\TaskBlock\\action.tasks.ts",[],"C:\\Users\\Maxim\\Desktop\\taskManager\\client\\src\\components\\ModalAddTask\\useStyles.ts",[],"C:\\Users\\Maxim\\Desktop\\taskManager\\client\\src\\components\\TaskBlock\\constants.tsx",[],"C:\\Users\\Maxim\\Desktop\\taskManager\\client\\src\\utils\\utils.ts",["332"],"interface ListItem {\r\n    id: number\r\n}\r\n\r\nexport const scrollProgress = (callback: (progress: number) => void):void => {\r\n    const scrollHeight = document.body.clientHeight\r\n    const progressScroll = window.pageYOffset\r\n    const viewPart = window.innerHeight\r\n    \r\n    callback(Math.round((progressScroll + viewPart) / scrollHeight * 100))\r\n    if(progressScroll === 0){\r\n        callback(0)\r\n    }\r\n}\r\n\r\n// yyyy/mm/dd msk time zone\r\nconst msk = '3'\r\nexport const today = (format: string = msk): string | Date => {\r\n    //console.log(addToDate(new Date('2021-02-03 21:45:19')), 'MYYY');\r\n    \r\n    return addToDate(new Date().toJSON()).slice(0,10).replace(/-/g,'/')\r\n}\r\n\r\nexport const normalizeServerDate = (\r\n        date: Date | string | number\r\n    ): string => {\r\n    return reverseString(new Date(date)\r\n        .toLocaleDateString('ru-RU'), '.', '-')\r\n}\r\n\r\n// check defrence with date and return if now less deadline\r\nexport const isDeadlinePositive = (deadline: Date | string ): boolean => {\r\n    const dead = Date.parse(JSON.stringify(deadline))\r\n    let now: any = normalizeServerDate(new Date(today()))\r\n    now = Date.parse(JSON.stringify(now))\r\n    if(dead - now >= 0){\r\n        return true\r\n    } else return false\r\n}\r\nexport const addToDate = (\r\n    date: string | Date, hours = msk, day = '0', month= '0', year = '0'\r\n): string => {\r\n    const intF1 = (e: Date): string  => {\r\n        return e.getFullYear() \r\n        + \"-\" + ('0' + (e.getMonth() + 1)).slice(-2) \r\n        + \"-\" + ('0' + e.getDate()).slice(-2)\r\n        + \"-\" + ('0' + e.getHours()).slice(-2)\r\n    }\r\n    const D = new Date(date)\r\n    D.setFullYear(D.getFullYear() + parseFloat(year), D.getMonth() + parseFloat(month), D.getDate() + parseFloat(day));\r\n\r\n    return intF1(D)\r\n}\r\n\r\nexport function reverseString(\r\n        str: string, \r\n        splitBy?: string,\r\n        joinBy?: string\r\n    ): string {\r\n    return str.split(`${splitBy}`).reverse().join(`${joinBy}`);\r\n}\r\nexport const maxSimbols = (str: string, max: number): string => {\r\n    if(str.length < 15) return str\r\n    return str.slice(0, max) + '...'\r\n}\r\nexport const decorateDate = (date: string | Date) => {\r\n    let t = new Date(date)\r\n    \r\n    const Year = t.getFullYear();\r\n    const Month = t.getMonth();\r\n    const Day = t.getDate();\r\n    const fMonth = \r\n    ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'];\r\n    \r\n    return `${Day} ${fMonth[Month - 1]} ${Year}`\r\n}\r\nexport const cutSimbols = (str: string ): string => {\r\n    return str.replace(/[_-]/, ' ')\r\n}\r\n// export const sortByDate = (arrayOfDate: object[]) => {\r\n//     arrayOfDate.sort(function(a,b){\r\n//         return new Date(b.date) - new Date(a.date);\r\n//     });\r\n// }\r\n","C:\\Users\\Maxim\\Desktop\\taskManager\\client\\src\\components\\TaskBlock\\Task.tsx",["333"],"C:\\Users\\Maxim\\Desktop\\taskManager\\client\\src\\components\\TaskBlock\\TaskLoader.tsx",[],"C:\\Users\\Maxim\\Desktop\\taskManager\\client\\src\\components\\StickySearchBlock.tsx",["334","335","336"],"/* eslint-disable no-use-before-define */\r\nimport Autocomplete from '@material-ui/lab/Autocomplete';\r\n\r\nimport React from 'react';\r\nimport { makeStyles, createStyles, Theme } from '@material-ui/core/styles';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport { useHttp } from '../hooks/http.hook';\r\nimport { set_tasks, task_loading } from './TaskBlock/action.tasks';\r\nimport { TasksContext } from '../context/tasks.context';\r\n\r\nconst useStyles = makeStyles((theme: Theme) =>\r\n  createStyles({\r\n    root: {\r\n      width: 500,\r\n      '& > * + *': {\r\n        marginTop: theme.spacing(3),\r\n      },\r\n    },\r\n  }),\r\n);\r\n\r\ninterface PropsStickySearchBlock {\r\n  title?: string,\r\n  chooseName?: string,\r\n  data: any,\r\n  value: any,\r\n  setValue: (value: any) => void,\r\n  styles?: any,\r\n  flagFilter?: boolean,\r\n  setSlide?: (num: number) => void | null\r\n}\r\nconst StickySearchBlock:React.FC<PropsStickySearchBlock> = \r\n({title, chooseName, data, value, setValue, styles, flagFilter=false, setSlide = null}):React.ReactElement => {\r\n  const classes = useStyles();\r\n  \r\n  const {loading, request, error} = useHttp()\r\n  const {dispatchTasks} = React.useContext(TasksContext)\r\n\r\n  const handlerChange = (value: any) => {\r\n    if(flagFilter && value){\r\n      (async() => {\r\n        dispatchTasks(task_loading())\r\n        const data = await request(`/tasks?id=${value.id}`)\r\n        dispatchTasks(set_tasks(data))\r\n        dispatchTasks(task_loading())\r\n      })()\r\n      setSlide!(0)\r\n    }\r\n  }\r\n  \r\n  return (\r\n    <div \r\n      className={`${classes.root} ${styles}`}\r\n    >\r\n      <Autocomplete\r\n        onChange={(e, newValue) => {\r\n          setValue(newValue);\r\n          handlerChange(newValue)\r\n        }}\r\n        value={value}\r\n        limitTags={2}\r\n        size=\"small\"\r\n        options={data}\r\n        getOptionLabel={({title}: any) => title}\r\n        renderInput={(params: any) => (\r\n          <>\r\n            <TextField \r\n              {...params} \r\n              variant=\"outlined\" \r\n              label={title} \r\n              placeholder={chooseName || ''} \r\n            />\r\n          </>\r\n        )}\r\n      />\r\n    </div>\r\n  );\r\n}\r\nexport default StickySearchBlock\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n// Top 100 films as rated by IMDb users. http://www.imdb.com/chart/top\r\nconst top100Films = [\r\n  { title: 'The Shawshank Redemption', year: 1994 },\r\n  { title: 'The Godfather', year: 1972 },\r\n  { title: 'The Godfather: Part II', year: 1974 },\r\n  { title: 'The Dark Knight', year: 2008 },\r\n  { title: '12 Angry Men', year: 1957 },\r\n  { title: \"Schindler's List\", year: 1993 },\r\n  { title: 'Pulp Fiction', year: 1994 },\r\n  { title: 'The Lord of the Rings: The Return of the King', year: 2003 },\r\n  { title: 'The Good, the Bad and the Ugly', year: 1966 },\r\n  { title: 'Fight Club', year: 1999 },\r\n  { title: 'The Lord of the Rings: The Fellowship of the Ring', year: 2001 },\r\n  { title: 'Star Wars: Episode V - The Empire Strikes Back', year: 1980 },\r\n  { title: 'Forrest Gump', year: 1994 },\r\n  { title: 'Inception', year: 2010 },\r\n  { title: 'The Lord of the Rings: The Two Towers', year: 2002 },\r\n  { title: \"One Flew Over the Cuckoo's Nest\", year: 1975 },\r\n  { title: 'Goodfellas', year: 1990 },\r\n  { title: 'The Matrix', year: 1999 },\r\n  { title: 'Seven Samurai', year: 1954 },\r\n  { title: 'Star Wars: Episode IV - A New Hope', year: 1977 },\r\n  { title: 'City of God', year: 2002 },\r\n  { title: 'Se7en', year: 1995 },\r\n  { title: 'The Silence of the Lambs', year: 1991 },\r\n  { title: \"It's a Wonderful Life\", year: 1946 },\r\n  { title: 'Life Is Beautiful', year: 1997 },\r\n  { title: 'The Usual Suspects', year: 1995 },\r\n  { title: 'Léon: The Professional', year: 1994 },\r\n  { title: 'Spirited Away', year: 2001 },\r\n  { title: 'Saving Private Ryan', year: 1998 },\r\n  { title: 'Once Upon a Time in the West', year: 1968 },\r\n  { title: 'American History X', year: 1998 },\r\n  { title: 'Interstellar', year: 2014 },\r\n  { title: 'Casablanca', year: 1942 },\r\n  { title: 'City Lights', year: 1931 },\r\n  { title: 'Psycho', year: 1960 },\r\n  { title: 'The Green Mile', year: 1999 },\r\n  { title: 'The Intouchables', year: 2011 },\r\n  { title: 'Modern Times', year: 1936 },\r\n  { title: 'Raiders of the Lost Ark', year: 1981 },\r\n  { title: 'Rear Window', year: 1954 },\r\n  { title: 'The Pianist', year: 2002 },\r\n  { title: 'The Departed', year: 2006 },\r\n  { title: 'Terminator 2: Judgment Day', year: 1991 },\r\n  { title: 'Back to the Future', year: 1985 },\r\n  { title: 'Whiplash', year: 2014 },\r\n  { title: 'Gladiator', year: 2000 },\r\n  { title: 'Memento', year: 2000 },\r\n  { title: 'The Prestige', year: 2006 },\r\n  { title: 'The Lion King', year: 1994 },\r\n  { title: 'Apocalypse Now', year: 1979 },\r\n  { title: 'Alien', year: 1979 },\r\n  { title: 'Sunset Boulevard', year: 1950 },\r\n  { title: 'Dr. Strangelove or: How I Learned to Stop Worrying and Love the Bomb', year: 1964 },\r\n  { title: 'The Great Dictator', year: 1940 },\r\n  { title: 'Cinema Paradiso', year: 1988 },\r\n  { title: 'The Lives of Others', year: 2006 },\r\n  { title: 'Grave of the Fireflies', year: 1988 },\r\n  { title: 'Paths of Glory', year: 1957 },\r\n  { title: 'Django Unchained', year: 2012 },\r\n  { title: 'The Shining', year: 1980 },\r\n  { title: 'WALL·E', year: 2008 },\r\n  { title: 'American Beauty', year: 1999 },\r\n  { title: 'The Dark Knight Rises', year: 2012 },\r\n  { title: 'Princess Mononoke', year: 1997 },\r\n  { title: 'Aliens', year: 1986 },\r\n  { title: 'Oldboy', year: 2003 },\r\n  { title: 'Once Upon a Time in America', year: 1984 },\r\n  { title: 'Witness for the Prosecution', year: 1957 },\r\n  { title: 'Das Boot', year: 1981 },\r\n  { title: 'Citizen Kane', year: 1941 },\r\n  { title: 'North by Northwest', year: 1959 },\r\n  { title: 'Vertigo', year: 1958 },\r\n  { title: 'Star Wars: Episode VI - Return of the Jedi', year: 1983 },\r\n  { title: 'Reservoir Dogs', year: 1992 },\r\n  { title: 'Braveheart', year: 1995 },\r\n  { title: 'M', year: 1931 },\r\n  { title: 'Requiem for a Dream', year: 2000 },\r\n  { title: 'Amélie', year: 2001 },\r\n  { title: 'A Clockwork Orange', year: 1971 },\r\n  { title: 'Like Stars on Earth', year: 2007 },\r\n  { title: 'Taxi Driver', year: 1976 },\r\n  { title: 'Lawrence of Arabia', year: 1962 },\r\n  { title: 'Double Indemnity', year: 1944 },\r\n  { title: 'Eternal Sunshine of the Spotless Mind', year: 2004 },\r\n  { title: 'Amadeus', year: 1984 },\r\n  { title: 'To Kill a Mockingbird', year: 1962 },\r\n  { title: 'Toy Story 3', year: 2010 },\r\n  { title: 'Logan', year: 2017 },\r\n  { title: 'Full Metal Jacket', year: 1987 },\r\n  { title: 'Dangal', year: 2016 },\r\n  { title: 'The Sting', year: 1973 },\r\n  { title: '2001: A Space Odyssey', year: 1968 },\r\n  { title: \"Singin' in the Rain\", year: 1952 },\r\n  { title: 'Toy Story', year: 1995 },\r\n  { title: 'Bicycle Thieves', year: 1948 },\r\n  { title: 'The Kid', year: 1921 },\r\n  { title: 'Inglourious Basterds', year: 2009 },\r\n  { title: 'Snatch', year: 2000 },\r\n  { title: '3 Idiots', year: 2009 },\r\n  { title: 'Monty Python and the Holy Grail', year: 1975 },\r\n];\r\n\r\n","C:\\Users\\Maxim\\Desktop\\taskManager\\client\\src\\components\\ModalAddTask\\DateAndTimePickers.tsx",[],"C:\\Users\\Maxim\\Desktop\\taskManager\\client\\src\\components\\Navigation\\FilterBar.tsx",["337","338","339","340","341"],"C:\\Users\\Maxim\\Desktop\\taskManager\\client\\src\\components\\ModalConfirm.tsx",["342"],"import Button from \"@material-ui/core/Button\";\r\nimport Dialog from \"@material-ui/core/Dialog/Dialog\";\r\nimport DialogActions from \"@material-ui/core/DialogActions\";\r\nimport DialogTitle from \"@material-ui/core/DialogTitle\";\r\nimport React from \"react\";\r\n\r\ninterface ModalConfirm {\r\n    isOpen: boolean,\r\n    callback: () => void | Promise<any>,\r\n    setConfirmOpen: (confirmOpen: boolean) => void,\r\n    title: string\r\n}\r\nconst ModalConfirm: React.FC<ModalConfirm> = ({isOpen, callback, setConfirmOpen, title}): React.ReactElement => {\r\n    return (\r\n        <Dialog\r\n            open={isOpen}\r\n            aria-labelledby=\"alert-dialog-title\"\r\n            aria-describedby=\"alert-dialog-description\"\r\n        >\r\n            <DialogTitle id=\"alert-dialog-title\">{title}</DialogTitle>\r\n            <DialogActions>\r\n                <Button onClick={() => {\r\n                    setConfirmOpen(false)\r\n                    callback()\r\n                }} color=\"primary\">\r\n                    Да\r\n                </Button>\r\n                <Button onClick={() => {\r\n                    setConfirmOpen(false)\r\n                }} color=\"primary\">\r\n                    Нет\r\n                </Button>\r\n            </DialogActions>\r\n        </Dialog>\r\n    )\r\n}\r\nexport default ModalConfirm","C:\\Users\\Maxim\\Desktop\\taskManager\\client\\src\\components\\Navigation\\Scroll.tsx",[],"C:\\Users\\Maxim\\Desktop\\taskManager\\client\\src\\components\\Navigation\\Dashboard.tsx",[],"C:\\Users\\Maxim\\Desktop\\taskManager\\client\\src\\hoc\\toHTML.tsx",["343","344"],"C:\\Users\\Maxim\\Desktop\\taskManager\\client\\src\\components\\users.util.ts",[],"C:\\Users\\Maxim\\Desktop\\taskManager\\client\\src\\components\\TaskBlock\\util.colors.ts",[],"C:\\Users\\Maxim\\Desktop\\taskManager\\client\\src\\components\\TaskBlock\\useStyles.ts",[],"C:\\Users\\Maxim\\Desktop\\taskManager\\client\\src\\roles.ts",[],"C:\\Users\\Maxim\\Desktop\\taskManager\\client\\src\\components\\PopupInfo.tsx",[],"C:\\Users\\Maxim\\Desktop\\taskManager\\client\\src\\components\\Profile.tsx",[],"C:\\Users\\Maxim\\Desktop\\taskManager\\client\\src\\components\\CheckEmployee.tsx",[],{"ruleId":"345","replacedBy":"346"},{"ruleId":"347","replacedBy":"348"},{"ruleId":"349","severity":1,"message":"350","line":1,"column":8,"nodeType":"351","messageId":"352","endLine":1,"endColumn":17},{"ruleId":"349","severity":1,"message":"353","line":3,"column":7,"nodeType":"351","messageId":"352","endLine":3,"endColumn":26},{"ruleId":"354","severity":1,"message":"355","line":29,"column":8,"nodeType":"356","endLine":29,"endColumn":10,"suggestions":"357"},{"ruleId":"358","severity":1,"message":"359","line":17,"column":14,"nodeType":"351","messageId":"360","endLine":17,"endColumn":25},{"ruleId":"349","severity":1,"message":"361","line":4,"column":8,"nodeType":"351","messageId":"352","endLine":4,"endColumn":25},{"ruleId":"358","severity":1,"message":"362","line":14,"column":7,"nodeType":"351","messageId":"360","endLine":14,"endColumn":43},{"ruleId":"349","severity":1,"message":"363","line":1,"column":56,"nodeType":"351","messageId":"352","endLine":1,"endColumn":72},{"ruleId":"349","severity":1,"message":"364","line":17,"column":10,"nodeType":"351","messageId":"352","endLine":17,"endColumn":14},{"ruleId":"349","severity":1,"message":"365","line":59,"column":30,"nodeType":"351","messageId":"352","endLine":59,"endColumn":35},{"ruleId":"349","severity":1,"message":"366","line":1,"column":11,"nodeType":"351","messageId":"352","endLine":1,"endColumn":19},{"ruleId":"349","severity":1,"message":"367","line":8,"column":7,"nodeType":"351","messageId":"352","endLine":8,"endColumn":11},{"ruleId":"358","severity":1,"message":"368","line":10,"column":14,"nodeType":"351","messageId":"360","endLine":10,"endColumn":25},{"ruleId":"349","severity":1,"message":"369","line":10,"column":14,"nodeType":"351","messageId":"352","endLine":10,"endColumn":25},{"ruleId":"358","severity":1,"message":"370","line":57,"column":18,"nodeType":"351","messageId":"360","endLine":57,"endColumn":22},{"ruleId":"349","severity":1,"message":"365","line":76,"column":30,"nodeType":"351","messageId":"352","endLine":76,"endColumn":35},{"ruleId":"354","severity":1,"message":"371","line":105,"column":8,"nodeType":"356","endLine":105,"endColumn":16,"suggestions":"372"},{"ruleId":"349","severity":1,"message":"373","line":13,"column":8,"nodeType":"351","messageId":"352","endLine":13,"endColumn":17},{"ruleId":"349","severity":1,"message":"374","line":57,"column":11,"nodeType":"351","messageId":"352","endLine":57,"endColumn":26},{"ruleId":"349","severity":1,"message":"375","line":59,"column":19,"nodeType":"351","messageId":"352","endLine":59,"endColumn":23},{"ruleId":"376","severity":1,"message":"377","line":19,"column":40,"nodeType":"378","messageId":"379","endLine":19,"endColumn":42},{"ruleId":"376","severity":1,"message":"377","line":34,"column":37,"nodeType":"378","messageId":"379","endLine":34,"endColumn":39},{"ruleId":"349","severity":1,"message":"380","line":4,"column":10,"nodeType":"351","messageId":"352","endLine":4,"endColumn":16},{"ruleId":"349","severity":1,"message":"381","line":3,"column":8,"nodeType":"351","messageId":"352","endLine":3,"endColumn":15},{"ruleId":"349","severity":1,"message":"382","line":4,"column":8,"nodeType":"351","messageId":"352","endLine":4,"endColumn":18},{"ruleId":"349","severity":1,"message":"380","line":5,"column":8,"nodeType":"351","messageId":"352","endLine":5,"endColumn":14},{"ruleId":"349","severity":1,"message":"383","line":21,"column":9,"nodeType":"351","messageId":"352","endLine":21,"endColumn":16},{"ruleId":"349","severity":1,"message":"384","line":24,"column":9,"nodeType":"351","messageId":"352","endLine":24,"endColumn":20},{"ruleId":"345","replacedBy":"385"},{"ruleId":"347","replacedBy":"386"},{"ruleId":"349","severity":1,"message":"350","line":1,"column":8,"nodeType":"351","messageId":"352","endLine":1,"endColumn":17},{"ruleId":"349","severity":1,"message":"387","line":6,"column":8,"nodeType":"351","messageId":"352","endLine":6,"endColumn":12},{"ruleId":"349","severity":1,"message":"388","line":17,"column":10,"nodeType":"351","messageId":"352","endLine":17,"endColumn":24},{"ruleId":"349","severity":1,"message":"389","line":17,"column":26,"nodeType":"351","messageId":"352","endLine":17,"endColumn":43},{"ruleId":"349","severity":1,"message":"365","line":55,"column":30,"nodeType":"351","messageId":"352","endLine":55,"endColumn":35},{"ruleId":"354","severity":1,"message":"390","line":82,"column":8,"nodeType":"356","endLine":82,"endColumn":10,"suggestions":"391"},{"ruleId":"349","severity":1,"message":"374","line":57,"column":11,"nodeType":"351","messageId":"352","endLine":57,"endColumn":26},{"ruleId":"349","severity":1,"message":"375","line":59,"column":19,"nodeType":"351","messageId":"352","endLine":59,"endColumn":23},{"ruleId":"349","severity":1,"message":"353","line":3,"column":7,"nodeType":"351","messageId":"352","endLine":3,"endColumn":26},{"ruleId":"354","severity":1,"message":"355","line":33,"column":8,"nodeType":"356","endLine":33,"endColumn":10,"suggestions":"392"},{"ruleId":"349","severity":1,"message":"393","line":4,"column":11,"nodeType":"351","messageId":"352","endLine":4,"endColumn":25},{"ruleId":"349","severity":1,"message":"367","line":8,"column":7,"nodeType":"351","messageId":"352","endLine":8,"endColumn":11},{"ruleId":"349","severity":1,"message":"394","line":4,"column":11,"nodeType":"351","messageId":"352","endLine":4,"endColumn":26},{"ruleId":"349","severity":1,"message":"367","line":8,"column":7,"nodeType":"351","messageId":"352","endLine":8,"endColumn":11},{"ruleId":"354","severity":1,"message":"395","line":43,"column":8,"nodeType":"356","endLine":43,"endColumn":16,"suggestions":"396"},{"ruleId":"349","severity":1,"message":"363","line":1,"column":56,"nodeType":"351","messageId":"352","endLine":1,"endColumn":72},{"ruleId":"349","severity":1,"message":"365","line":59,"column":30,"nodeType":"351","messageId":"352","endLine":59,"endColumn":35},{"ruleId":"349","severity":1,"message":"380","line":4,"column":10,"nodeType":"351","messageId":"352","endLine":4,"endColumn":16},{"ruleId":"349","severity":1,"message":"366","line":1,"column":11,"nodeType":"351","messageId":"352","endLine":1,"endColumn":19},{"ruleId":"349","severity":1,"message":"397","line":18,"column":29,"nodeType":"351","messageId":"352","endLine":18,"endColumn":41},{"ruleId":"349","severity":1,"message":"398","line":36,"column":10,"nodeType":"351","messageId":"352","endLine":36,"endColumn":17},{"ruleId":"349","severity":1,"message":"365","line":36,"column":28,"nodeType":"351","messageId":"352","endLine":36,"endColumn":33},{"ruleId":"349","severity":1,"message":"399","line":93,"column":7,"nodeType":"351","messageId":"352","endLine":93,"endColumn":18},{"ruleId":"349","severity":1,"message":"400","line":10,"column":17,"nodeType":"351","messageId":"352","endLine":10,"endColumn":31},{"ruleId":"349","severity":1,"message":"398","line":50,"column":10,"nodeType":"351","messageId":"352","endLine":50,"endColumn":17},{"ruleId":"349","severity":1,"message":"365","line":50,"column":28,"nodeType":"351","messageId":"352","endLine":50,"endColumn":33},{"ruleId":"349","severity":1,"message":"401","line":51,"column":25,"nodeType":"351","messageId":"352","endLine":51,"endColumn":30},{"ruleId":"354","severity":1,"message":"402","line":155,"column":6,"nodeType":"356","endLine":155,"endColumn":15,"suggestions":"403"},{"ruleId":"358","severity":1,"message":"362","line":13,"column":7,"nodeType":"351","messageId":"360","endLine":13,"endColumn":43},{"ruleId":"376","severity":1,"message":"377","line":19,"column":40,"nodeType":"378","messageId":"379","endLine":19,"endColumn":42},{"ruleId":"376","severity":1,"message":"377","line":34,"column":37,"nodeType":"378","messageId":"379","endLine":34,"endColumn":39},"no-native-reassign",["404"],"no-negated-in-lhs",["405"],"@typescript-eslint/no-unused-vars","'Container' is defined but never used.","Identifier","unusedVar","'storageName' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook React.useCallback has a missing dependency: 'token'. Either include it or remove the dependency array.","ArrayExpression",["406"],"@typescript-eslint/no-redeclare","'AuthContext' is already defined.","redeclared","'DialogContentText' is defined but never used.","'ModalConfirm' is already defined.","'TextareaAutosize' is defined but never used.","'LEAD' is defined but never used.","'error' is assigned a value but never used.","'ListItem' is defined but never used.","'noop' is assigned a value but never used.","'HomeContext' is already defined.","'HomeContext' is assigned a value but never used.","'Task' is already defined.","React Hook React.useEffect has a missing dependency: 'request'. Either include it or remove the dependency array.",["407"],"'CloseIcon' is defined but never used.","'registerHandler' is assigned a value but never used.","'data' is assigned a value but never used.","array-callback-return","Array.prototype.map() expects a value to be returned at the end of arrow function.","ArrowFunctionExpression","expectedAtEnd","'Button' is defined but never used.","'Popover' is defined but never used.","'Typography' is defined but never used.","'classes' is assigned a value but never used.","'handleClose' is assigned a value but never used.",["404"],["405"],"'Task' is defined but never used.","'activePriority' is defined but never used.","'activeResponsible' is defined but never used.","React Hook React.useEffect has missing dependencies: 'person' and 'request'. Either include them or remove the dependency array.",["408"],["409"],"'HomeContextInt' is defined but never used.","'TasksContextInt' is defined but never used.","React Hook React.useEffect has missing dependencies: 'dispatchTasks' and 'request'. Either include them or remove the dependency array.",["410"],"'task_loading' is defined but never used.","'loading' is assigned a value but never used.","'top100Films' is assigned a value but never used.","'sort_by_update' is defined but never used.","'state' is assigned a value but never used.","React Hook React.useEffect has a missing dependency: 'dispatchTasks'. Either include it or remove the dependency array.",["411"],"no-global-assign","no-unsafe-negation",{"desc":"412","fix":"413"},{"desc":"414","fix":"415"},{"desc":"414","fix":"416"},{"desc":"412","fix":"417"},{"desc":"418","fix":"419"},{"desc":"420","fix":"421"},"Update the dependencies array to be: [token]",{"range":"422","text":"423"},"Update the dependencies array to be: [person, request]",{"range":"424","text":"425"},{"range":"426","text":"425"},{"range":"427","text":"423"},"Update the dependencies array to be: [dispatchTasks, person, request]",{"range":"428","text":"429"},"Update the dependencies array to be: [checked, dispatchTasks]",{"range":"430","text":"431"},[1034,1036],"[token]",[3275,3283],"[person, request]",[2808,2810],[1170,1172],[1166,1174],"[dispatchTasks, person, request]",[4541,4550],"[checked, dispatchTasks]"]